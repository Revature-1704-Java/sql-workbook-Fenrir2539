--conn chinook/p4ssw0rd

/*2.0 SQL QUERIES */
--2.1 SELECT STATEMENTS
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;
--2.2 ORDER BY
SELECT TITLE FROM ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;
--2.3 INSERT INTO
INSERT INTO GENRE VALUES (26, 'Heavy Metal');
INSERT INTO GENRE VALUES (27, 'Hair Metal');

INSERT INTO EMPLOYEE VALUES (9, 'Swanson', 'Alex', 'Tech Guru', NULL, '01-MAR-88', '12-DEC-17', '11730 America Plaza', 'Reston', 'VA', 'USA', '20170', '+1 (805) 908-2093', NULL, 'swansonalex@gmail.com');
INSERT INTO EMPLOYEE VALUES (10, 'Ruth', 'Babe', 'Swinger', NULL, '06-FEB-95', '11-JUL-14', '4 Yawkey Way', 'Boston', 'MA', 'USA', '02215', NULL, NULL, NULL);

INSERT INTO CUSTOMER VALUES (60, 'Man', 'A', 'Some Company', '123 Fake St', 'Nicecity', 'CA', 'USA', '90210', '+1 (424) 444 5555', NULL, 'aman@aol.com', 6);
INSERT INTO CUSTOMER VALUES (61, 'Woman', 'A', 'Another Company', '456 Faker St', 'Stinkcity', 'CA', 'USA', '90219', '+1 (424) 666 7777', NULL, 'awoman@aol.com', 6);

--2.4 UPDATE
UPDATE CUSTOMER 
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--2.5 LIKE
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE('06/01/2003', 'MM/DD/YYYY') AND TO_DATE('03/01/2004', 'MM/DD/YYYY');

--2.7 DELETE
ALTER TABLE INVOICE DROP CONSTRAINT FK_INVOICECUSTOMERID;

ALTER TABLE INVOICE
ADD CONSTRAINT FK_INVOICECUSTOMERID
FOREIGN KEY (CUSTOMERID)
REFERENCES CUSTOMER (CUSTOMERID)
ON DELETE CASCADE;

ALTER TABLE INVOICELINE DROP CONSTRAINT FK_INVOICELINEINVOICEID;

ALTER TABLE INVOICELINE
ADD CONSTRAINT FK_INVOICELINEINVOICEID
FOREIGN KEY (INVOICEID)
REFERENCES INVOICE (INVOICEID)
ON DELETE CASCADE;

DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

/* SQL FUNCTIONS */
--3.1 SYSTEM DEFINED FUNCTION: Current Time
CREATE OR REPLACE FUNCTION getSystemTime
RETURN TIMESTAMP WITH TIME ZONE AS
  MY_SYSTIME TIMESTAMP WITH TIME ZONE;
BEGIN
  SELECT systimestamp
    INTO MY_SYSTIME
    FROM DUAL;
  RETURN MY_SYSTIME;
END;
/ 

SELECT getSystemTime() FROM DUAL;

--3.1 SYSTEM DEFINED FUNCTION: MediaType
CREATE OR REPLACE FUNCTION getMediaTypeLength(X IN NUMBER)
RETURN NUMBER AS Z NUMBER;
Y VARCHAR2(200);
BEGIN
  SELECT NAME INTO Y FROM MEDIATYPE WHERE MEDIATYPEID = X;
  Z:= LENGTH(Y);
  RETURN Z;
END;
/ 

SELECT NAME FROM MEDIATYPE WHERE MEDIATYPEID = 1;
SELECT getMediaTypeLength(1) FROM DUAL;

 --3.2 System Defined Aggregate Functions: AVG invoive price
CREATE OR REPLACE FUNCTION getAverageInvoice
RETURN NUMBER AS Z NUMBER;
BEGIN
  SELECT AVG(TOTAL) INTO Z FROM INVOICE;
  RETURN Z;
END;
/

SELECT getAverageInvoice() FROM DUAL;

--3.2 System Defined Aggregate Functions: max track price
CREATE OR REPLACE FUNCTION getExpensiveTrack
RETURN NUMBER AS Z NUMBER;
BEGIN
  SELECT MAX(UNITPRICE) INTO Z FROM TRACK;
  RETURN Z;
END;
/

SELECT getExpensiveTrack() FROM DUAL;

--3.3 User Defined Functions: get Avg InvoiceLine
CREATE OR REPLACE FUNCTION GET_AVG_INVOICE
RETURN NUMBER AS Average NUMBER;
S SYS_REFCURSOR;
v_currentPrice NUMBER;
v_runningSum NUMBER;
v_count NUMBER;
v_avg NUMBER;
BEGIN
    OPEN S FOR
    SELECT UNITPRICE FROM INVOICELINE;
    v_currentPrice := 0;
    v_runningSum := 0;
    v_count := 0;
    LOOP
        FETCH S INTO v_currentPrice;
        EXIT WHEN S%NOTFOUND;
        v_runningSum := v_runningSum + v_currentPrice;
        v_count := v_count + 1;
    END LOOP;
    Average := v_runningSum / v_count;
    RETURN Average;
    CLOSE S;
END;
/

SELECT GET_AVG_INVOICE() FROM DUAL;

--3.4 User Defined Table Valued Functions 
create type my_tab_type is object
(fname varchar2(20), lname varchar2(20), bdate date)
/

create type my_tab_type_coll is table of my_tab_type;
/

create or replace function get_some_data
return my_tab_type_coll pipelined is
begin
  FOR i in (select FIRSTNAME, LASTNAME, BIRTHDATE from EMPLOYEE where BIRTHDATE > TO_DATE('12/31/1968', 'MM/DD/YYYY')) loop
    pipe row(my_tab_type(i.FIRSTNAME, i.LASTNAME, i.BIRTHDATE));
  end loop;
  return;
end;
/

SELECT * FROM table(get_Some_Data());

/* 4.0 Procedures */
--4.1 Basic Stored Procedure 
CREATE OR REPLACE PROCEDURE GET_ALL_EMPLOYEE_NAMES(S OUT SYS_REFCURSOR) AS
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;
/

DECLARE
    S SYS_REFCURSOR;
    SOME_FIRSTNAME EMPLOYEE.FIRSTNAME%TYPE;
    SOME_LASTNAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GET_ALL_EMPLOYEE_NAMES(S);
    LOOP
        FETCH S INTO SOME_FIRSTNAME, SOME_LASTNAME;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(SOME_FIRSTNAME || ' ' ||SOME_LASTNAME);
    END LOOP;
    CLOSE S;
END;

--4.2 Stored Procedure Input Parameters 
CREATE OR REPLACE PROCEDURE SP_UPDATE_EMPLOYEE(l_EMPLOYEEID IN NUMBER, l_LASTNAME IN VARCHAR2, 
    l_FIRSTNAME IN VARCHAR2, l_TITLE IN VARCHAR2, l_REPORTSTO IN NUMBER, l_BIRTHDATE IN DATE,
    l_HIREDATE IN DATE, l_ADDRESS IN VARCHAR2, l_CITY IN VARCHAR2, l_STATE IN VARCHAR2,
    l_COUNTRY IN VARCHAR2, l_POSTALCODE IN VARCHAR2, l_PHONE IN VARCHAR2, l_FAX IN VARCHAR2,
    l_EMAIL IN VARCHAR2) AS
BEGIN
    IF l_LASTNAME IS NOT NULL THEN
        UPDATE EMPLOYEE SET LASTNAME = l_LASTNAME
            WHERE EMPLOYEEID = l_EMPLOYEEID;
    END IF;
    
    IF l_FIRSTNAME IS NOT NULL THEN
        UPDATE EMPLOYEE SET FIRSTNAME = l_FIRSTNAME
            WHERE EMPLOYEEID = l_EMPLOYEEID;
    END IF;
    
    IF l_TITLE IS NOT NULL THEN
        UPDATE EMPLOYEE SET TITLE = l_TITLE
            WHERE EMPLOYEEID = l_EMPLOYEEID;
    END IF;
    
    IF l_REPORTSTO IS NOT NULL THEN
        UPDATE EMPLOYEE SET REPORTSTO = l_REPORTSTO
            WHERE EMPLOYEEID = l_EMPLOYEEID;
    END IF;
    
    IF l_BIRTHDATE IS NOT NULL THEN
        UPDATE EMPLOYEE SET BIRTHDATE = l_BIRTHDATE
            WHERE EMPLOYEEID = l_EMPLOYEEID;
    END IF;
    
    IF l_HIREDATE IS NOT NULL THEN
        UPDATE EMPLOYEE SET HIREDATE = l_HIREDATE
            WHERE EMPLOYEEID = l_EMPLOYEEID;
    END IF;
    
    IF l_ADDRESS IS NOT NULL THEN
        UPDATE EMPLOYEE SET ADDRESS = l_ADDRESS
            WHERE EMPLOYEEID = l_EMPLOYEEID;
    END IF;
    
    IF l_CITY IS NOT NULL THEN
        UPDATE EMPLOYEE SET CITY = l_CITY
            WHERE EMPLOYEEID = l_EMPLOYEEID;
    END IF;
    
    IF l_STATE IS NOT NULL THEN
        UPDATE EMPLOYEE SET STATE = l_STATE
            WHERE EMPLOYEEID = l_EMPLOYEEID;
    END IF;
    
    IF l_COUNTRY IS NOT NULL THEN
        UPDATE EMPLOYEE SET COUNTRY = l_COUNTRY
            WHERE EMPLOYEEID = l_EMPLOYEEID;
    END IF;
    
    IF l_POSTALCODE IS NOT NULL THEN
        UPDATE EMPLOYEE SET POSTALCODE = l_POSTALCODE
            WHERE EMPLOYEEID = l_EMPLOYEEID;
    END IF;
    
    IF l_PHONE IS NOT NULL THEN
        UPDATE EMPLOYEE SET PHONE = l_PHONE
            WHERE EMPLOYEEID = l_EMPLOYEEID;
    END IF;
    
    IF l_FAX IS NOT NULL THEN
        UPDATE EMPLOYEE SET FAX = l_FAX
            WHERE EMPLOYEEID = l_EMPLOYEEID;
    END IF;
    
    IF l_EMAIL IS NOT NULL THEN
        UPDATE EMPLOYEE SET EMAIL = l_EMAIL
            WHERE EMPLOYEEID = l_EMPLOYEEID;
    END IF;
    
    COMMIT;
    
    EXCEPTION
        WHEN OTHERS
        THEN DBMS_OUTPUT.PUT_LINE('FAILED TO UPDATE EMPLOYEE');
        ROLLBACK;
END;
/

BEGIN
    SP_UPDATE_EMPLOYEE(9,'Swenson' , 'Alexander', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
END;
/

--4.2 Return employee manager
CREATE OR REPLACE PROCEDURE SP_GET_EMPLOYEE_MANAGER(l_EMPLOYEEID IN NUMBER, 
    v_EmployeeID OUT NUMBER, v_Manager_fname OUT VARCHAR2, v_Manager_lname OUT VARCHAR2) AS
v_Employee_REPORTSTO EMPLOYEE.REPORTSTO%TYPE;
BEGIN
    v_EmployeeID := l_EMPLOYEEID;
    
    SELECT REPORTSTO
    INTO v_Employee_REPORTSTO
    FROM Employee
    WHERE EMPLOYEEID = l_EMPLOYEEID;
    
    SELECT FIRSTNAME, LASTNAME
    INTO v_Manager_fname, v_Manager_lname
    FROM Employee
    WHERE EMPLOYEEID = v_Employee_REPORTSTO;
EXCEPTION WHEN OTHERS THEN
     DBMS_OUTPUT.PUT_LINE('Could not find manager');
END;
/

DECLARE
v_EMPLOYEEID NUMBER;
v_Manager_fname VARCHAR2(40);
v_Manager_lname VARCHAR2(20);
BEGIN
    SP_GET_EMPLOYEE_MANAGER(3,v_EMPLOYEEID ,v_Manager_fname, v_Manager_lname);
    DBMS_OUTPUT.PUT_LINE('For Employee ID: ' || v_EMPLOYEEID);
    DBMS_OUTPUT.PUT_LINE('Manager First Name: ' || v_Manager_fname);
    DBMS_OUTPUT.PUT_LINE('Last Name: ' || v_Manager_lname);
END;
/

--4.3 Stored Procedure Output Parameters
CREATE OR REPLACE PROCEDURE SP_GET_CUSTOMER_NAME_COMPANY(l_CUSTOMERID IN NUMBER, 
    l_CUSTOMERFIRSTNAME OUT VARCHAR2, l_CUSTOMERLASTNAME OUT VARCHAR2, l_COMPANY OUT VARCHAR2) AS
BEGIN
    SELECT FIRSTNAME, LASTNAME, COMPANY
    INTO l_CUSTOMERFIRSTNAME, l_CUSTOMERLASTNAME, l_COMPANY
    FROM CUSTOMER
    WHERE CUSTOMERID = l_CUSTOMERID;
END;
/

DECLARE
fname VARCHAR2(40);
lname VARCHAR2(20);
company VARCHAR2(80);
BEGIN
    SP_GET_CUSTOMER_NAME_COMPANY(1, fname, lname, company);
    DBMS_OUTPUT.PUT_LINE('Customer First Name: ' ||fname);
    DBMS_OUTPUT.PUT_LINE('Customer Last Name: ' ||lname);
    DBMS_OUTPUT.PUT_LINE('Customer Company: ' ||company);
END;
/

/* 5.0 TRANSACTIONS */
--5.0 Transaction to delete a row based on Invoice ID
CREATE OR REPLACE PROCEDURE SP_TRANSACTION_DELETE_INVOICE(v_INVOICEID IN NUMBER) AS
BEGIN
    DELETE FROM INVOICE WHERE INVOICEID = v_INVOICEID;
END;
/

BEGIN
    SP_TRANSACTION_DELETE_INVOICE(1);
END;
/

ROLLBACK;

--5.0
CREATE OR REPLACE PROCEDURE TRANSACTION_CUSTOMER_RECORD(l_CUSTOMERID IN NUMBER, l_FIRSTNAME IN VARCHAR2, 
    l_LASTNAME IN VARCHAR2, l_COMPANY IN VARCHAR2, l_ADDRESS IN VARCHAR2, l_CITY IN VARCHAR2, l_STATE IN VARCHAR2,
    l_COUNTRY IN VARCHAR2, l_POSTALCODE IN VARCHAR2, l_PHONE IN VARCHAR2, l_FAX IN VARCHAR2,
    l_EMAIL IN VARCHAR2, l_SUPPORTREPID IN NUMBER) AS
BEGIN
    INSERT INTO CUSTOMER VALUES (l_CUSTOMERID, l_FIRSTNAME, l_LASTNAME, l_COMPANY,
        l_ADDRESS, l_CITY, l_STATE, l_COUNTRY, l_POSTALCODE, l_PHONE, l_FAX, l_EMAIL, l_SUPPORTREPID);
END;
/

BEGIN
    TRANSACTION_CUSTOMER_RECORD(62, 'test', 'testing', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'email@email.com', NULL);
END;
/

ROLLBACK;

/* 6.0 TRIGGERS */
--6.1  insert trigger on the employee table fired after a new record is inserted into the table
CREATE OR REPLACE TRIGGER AFTER_INSERT_ROW 
AFTER INSERT ON EMPLOYEE
FOR EACH ROW 
WHEN (NEW.EMPLOYEEID > 0)
BEGIN
    DBMS_OUTPUT.PUT_LINE('ID: ' || :NEW.EMPLOYEEID);
    DBMS_OUTPUT.PUT_LINE('LASTNAME: ' || :NEW.LASTNAME);
    DBMS_OUTPUT.PUT_LINE('FIRSTNAME: ' || :NEW.FIRSTNAME);
    DBMS_OUTPUT.PUT_LINE('TITLE: ' || :NEW.TITLE);
    DBMS_OUTPUT.PUT_LINE('REPORTSTO: ' || :NEW.REPORTSTO);
    DBMS_OUTPUT.PUT_LINE('BIRTHDATE: ' || :NEW.BIRTHDATE);
    DBMS_OUTPUT.PUT_LINE('HIREDATE: ' || :NEW.HIREDATE);
    DBMS_OUTPUT.PUT_LINE('ADDRESS: ' || :NEW.ADDRESS);
    DBMS_OUTPUT.PUT_LINE('CITY: ' || :NEW.CITY);
    DBMS_OUTPUT.PUT_LINE('STATE: ' || :NEW.STATE);
    DBMS_OUTPUT.PUT_LINE('COUNTRY: ' || :NEW.COUNTRY);
    DBMS_OUTPUT.PUT_LINE('POSTALCODE: ' || :NEW.POSTALCODE);
    DBMS_OUTPUT.PUT_LINE('PHONE: ' || :NEW.PHONE);
    DBMS_OUTPUT.PUT_LINE('FAX: ' || :NEW.FAX);
    DBMS_OUTPUT.PUT_LINE('EMAIL: ' || :NEW.EMAIL);
END;
/

INSERT INTO EMPLOYEE VALUES (11, 'Ruth', 'Babe', 'Swinger', NULL, '06-FEB-95', '11-JUL-14', '4 Yawkey Way', 'Boston', 'MA', 'USA', '02215', NULL, NULL, NULL);
ROLLBACK;

--Create an after update trigger on the album table that fires after a row is inserted in the table 
CREATE OR REPLACE TRIGGER AFTER_UPDATE_ROW 
AFTER UPDATE ON ALBUM
FOR EACH ROW 
WHEN (NEW.ALBUMID > 0)
BEGIN
    DBMS_OUTPUT.PUT_LINE('ID: ' || :NEW.ALBUMID);
    DBMS_OUTPUT.PUT_LINE('TITLE: ' || :NEW.TILE);
    DBMS_OUTPUT.PUT_LINE('ARTISTID: ' || :NEW.ARTISTID);
    
    DBMS_OUTPUT.PUT_LINE('ID: ' || :OLD.ALBUMID);
    DBMS_OUTPUT.PUT_LINE('TITLE: ' || :OLD.TILE);
    DBMS_OUTPUT.PUT_LINE('ARTISTID: ' || :OLD.ARTISTID);
END;
/

--Create an after delete trigger on the customer table that fires after a row is deleted from the table
CREATE OR REPLACE TRIGGER AFTER_DELETE_ROW 
AFTER DELETE ON CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT_LINE('DELETED');
END;
/

/* 7.0 JOINS */
--7.1 Create an inner join that joins customers and orders and specifies the name of the customer and the invoiceId
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID FROM CUSTOMER INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.2 Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL FROM CUSTOMER LEFT JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.3 Create a right join that joins album and artist specifying artist name and title
SELECT ARTIST.NAME, ALBUM.TITLE FROM ALBUM RIGHT JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID;

--7.4 Create a cross join that joins album and artist and sorts by artist name in ascending order
SELECT ARTIST.NAME, ALBUM.TITLE FROM ALBUM CROSS JOIN ARTIST WHERE ALBUM.ARTISTID = ARTIST.ARTISTID ORDER BY ARTISTNAME ASC;

--7.5 Perform a self-join on the employee table, joining on the reportsto column. 
SELECT A.FIRSTNAME AS EmployeeFirstName, A.LASTNAME AS EmployeeLastName, B.FIRSTNAME AS ManagerFirstName, B.LASTNAME AS ManagerLastName
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO = B.EMPLOYEEID;

--7.6 Create an inner join between all tables in the chinook database.
SELECT * FROM ALBUM INNER JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID 
    INNER JOIN TRACK ON ALBUM.ALBUMID = TRACK.ALBUMID 
    INNER JOIN PLAYLISTTRACK ON TRACK.TRACKID = PLAYLISTTRACK.TRACKID
    INNER JOIN PLAYLIST ON PLAYLISTTRACK.PLAYLISTID = PLAYLIST.PLAYLISTID
    INNER JOIN MEDIATYPE ON MEDIATYPE.MEDIATYPEID = TRACK.MEDIATYPEID
    INNER JOIN GENRE ON GENRE.GENREID = TRACK.GENREID
    INNER JOIN INVOICELINE ON INVOICELINE.TRACKID = TRACK.TRACKID
    INNER JOIN INVOICE ON INVOICE.INVOICEID = INVOICELINE.INVOICEID
    INNER JOIN CUSTOMER ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID 
    INNER JOIN EMPLOYEE ON EMPLOYEE.EMPLOYEEID = CUSTOMER.SUPPORTREPID;
    
/* ADMINISTRATION */
--9.0 Create a .bak file for the Chinook database 
BACKUP;